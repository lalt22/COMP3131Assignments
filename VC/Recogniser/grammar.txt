program             ->  ( func-decl | var-decl )*

program'            -> (func-var-decl')*

 // declarations
 func-decl           -> type identifier para-list compound-stmt
 var-decl            -> type init-declarator-list ";"

// func-var-decl'      -> type (identifier para-list compound-stmt | init-declarator-list ";")
 func-var-decl'      -> type identifier (( para-list compound-stmt) | ( "[" INTLITERAL? "]")? ( "=" initialiser )? ( "," init-declarator )* ";")


// init-declarator-list-> init-declarator ( "," init-declarator )*
// init-declarator-list' -> identifier ("[" INTLITERAL? "]")? ( "=" initialiser )? ( "," init-declarator )*

 init-declarator     -> declarator ( "=" initialiser )?
// init-declarator'     ->  identifier ("[" INTLITERAL? "]")? ( "=" initialiser )?

 # DONE
 declarator          -> identifier
                        |  identifier "[" INTLITERAL? "]"
 declarator'          -> identifier ("[" INTLITERAL? "]")?

initialiser         -> expr
                    |  "{" expr ( "," expr )* "}"

// primitive types
//DONE
type                -> void | boolean | int | float

// identifiers

//DONE
identifier          -> ID

// statements
compound-stmt       -> "{" var-decl* stmt* "}"
stmt                -> compound-stmt
                    |  if-stmt
                    |  for-stmt
                    |  while-stmt
                    |  break-stmt
                    |  continue-stmt
                    |  return-stmt
                    |  expr-stmt

//DONE
if-stmt             -> if "(" expr ")" stmt ( else stmt )?

//DONE (I THINK)
for-stmt            -> for "(" expr? ";" expr? ";" expr? ")" stmt

//DONE
while-stmt          -> while "(" expr ")" stmt

//DONE
break-stmt          -> break ";"

//DONE
continue-stmt       -> continue ";"

//DONE
return-stmt         -> return expr? ";"

expr-stmt           -> expr? ";"


// expressions
expr                -> assignment-expr
assignment-expr     -> ( cond-or-expr "=" )* cond-or-expr

cond-or-expr        -> cond-and-expr
                    |  cond-or-expr "||" cond-and-expr
cond-or-expr        -> cond-and-expr cond-or-expr'
cond-or-exp'        -> "||" cond-and-expr cond-or-expr'


cond-and-expr       -> equality-expr
                    |  cond-and-expr "&&" equality-expr
cond-and-expr       -> equality-expr cond-and-expr'
cond-and-expr'      -> "&&" equality-expr cond-and-expr'


equality-expr       -> rel-expr
                    |  equality-expr "==" rel-expr
                    |  equality-expr "!=" rel-expr
equality-expr       -> rel-expr equality-expr'
equality-expr'      -> "==" rel-expr equality-expr' | "!=" rel-expr equality-expr'


rel-expr            -> additive-expr
                    |  rel-expr "<" additive-expr
                    |  rel-expr "<=" additive-expr
                    |  rel-expr ">" additive-expr
                    |  rel-expr ">=" additive-expr
rel-expr            -> additive-expr rel-expr'
rel-expr            -> "<" additive-expr rel-expr' | "<=" additive-expr rel-expr'
                        | ">" additive-expr rel-expr' | ">=" additive-expr rel-expr'


additive-expr       -> multiplicative-expr
                    |  additive-expr "+" multiplicative-expr
                    |  additive-expr "-" multiplicative-expr
additive-expr       -> multiplicative-expr additive-expr'
additive-expr'      -> "+" multiplicative-expr additive-expr' | "-" multiplicative-expr additive-expr'

multiplicative-expr -> unary-expr
                    |  multiplicative-expr "*" unary-expr
                    |  multiplicative-expr "/" unary-expr
multiplicative-expr -> unary-expr multiplicative-expr'
multiplicative-expr'-> "*" unary-expr multiplicative-expr' | "/" unary-expr multiplicative-expr'

unary-expr          -> "+" unary-expr
                    |  "-" unary-expr
                    |  "!" unary-expr
                    |  primary-expr

primary-expr        -> identifier arg-list?
                    | identifier "[" expr "]"
                    | "(" expr ")"
                    | INTLITERAL
                    | FLOATLITERAL
                    | BOOLLITERAL
                    | STRINGLITERAL

primary-expr        -> identifier arg-list? ("[" expr "]")?
                    | "(" expr ")"
                    | INTLITERAL
                    | FLOATLITERAL
                    | BOOLLITERAL
                    | STRINGLITERAL


// parameters
para-list           -> "(" proper-para-list? ")"
proper-para-list    -> para-decl ( "," para-decl )*
para-decl           -> type declarator
arg-list            -> "(" proper-arg-list? ")"
proper-arg-list     -> arg ( "," arg )*
arg                 -> expr